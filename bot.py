import phonenumbers
from phonenumbers import timezone, geocoder, carrier, number_type, PhoneNumberType, region_code_for_number, format_number, PhoneNumberFormat
import telebot
from telebot import types
from datetime import datetime, timedelta
import requests
import os
import time
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8104258718:AAGSc6fUduEs3DYic10PcGK27FwLTfHVCpQ"
CRYPTO_PAY_API = "415965:AAkEdx0gVcQSHpE3x0EWULFUbN2IvCFK2tW"
BOT_USERNAME = "LifeStanOsintBot"
CRYPTO_CURRENCY = "TON"
CRYPTO_AMOUNT = 20
ADMIN_IDS = [7956920182, 1623802164]

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

for f in ["log.txt", "premium.txt", "leaks.txt", "invoices.txt", "user_requests.txt"]:
    if not os.path.exists(f): open(f, "w", encoding="utf-8").close()

# === –£–¢–ò–õ–ò–¢–´ ===
def is_premium(uid): return str(uid) in open("premium.txt", encoding="utf-8").read()
def add_premium(uid): open("premium.txt", "a", encoding="utf-8").write(f"{uid}\n")
def log(uid, txt): open("log.txt", "a", encoding="utf-8").write(f"[{datetime.now()}] {uid} -> {txt}\n")
def check_leaks(phone): return phone in open("leaks.txt", encoding="utf-8").read()
def log_request(uid): open("user_requests.txt", "a", encoding="utf-8").write(f"{uid}|{datetime.now()}\n")
def check_limit(uid):
    lines = open("user_requests.txt", encoding="utf-8").readlines()
    now = datetime.now()
    last_hour = [l for l in lines if l.startswith(str(uid)) and now - datetime.strptime(l.split("|")[1].strip(), '%Y-%m-%d %H:%M:%S.%f') < timedelta(hours=1)]
    return len(last_hour) < 3 or is_premium(uid)

# === –ö–ù–û–ü–ö–ò ===
@bot.message_handler(commands=["start"])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üì± –ü—Ä–æ–±–∏—Ç—å –Ω–æ–º–µ—Ä", "üíé –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
    kb.row("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    kb.row("‚ùì –ü–æ–º–æ—â—å")
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def help_handler(m):
    bot.send_message(m.chat.id, "üìò /start ‚Äî –º–µ–Ω—é\nüì± –ü—Ä–æ–±–µ–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380...\nüíé –ü—Ä–µ–º–∏—É–º ‚Äî 3+ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Å")

@bot.message_handler(func=lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(m):
    total = sum(1 for l in open("log.txt", encoding="utf-8") if str(m.from_user.id) in l)
    bot.send_message(m.chat.id, f"üë§ <b>–ò–º—è:</b> {m.from_user.first_name}\nüÜî <b>ID:</b> {m.from_user.id}\nüíé <b>–ü—Ä–µ–º–∏—É–º:</b> {'–î–∞' if is_premium(m.from_user.id) else '–ù–µ—Ç'}\nüìä <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {total}")

@bot.message_handler(func=lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def delete(m):
    for f in ["log.txt", "premium.txt", "user_requests.txt"]:
        lines = open(f, encoding="utf-8").readlines()
        with open(f, "w", encoding="utf-8") as fw:
            fw.writelines([l for l in lines if str(m.from_user.id) not in l])
    bot.send_message(m.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

@bot.message_handler(func=lambda m: m.text == "üíé –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def buy(m):
    if is_premium(m.from_user.id):
        return bot.send_message(m.chat.id, "üíé –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º.")
    try:
        r = requests.post("https://pay.crypt.bot/createInvoice", json={
            "asset": CRYPTO_CURRENCY, "amount": CRYPTO_AMOUNT,
            "description": f"–ü—Ä–µ–º–∏—É–º –¥–ª—è {m.from_user.id}",
            "hidden_message": "–°–ø–∞—Å–∏–±–æ! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            "paid_btn_name": "url", "paid_btn_url": f"https://t.me/{BOT_USERNAME}"
        }, headers={"Crypto-Pay-API-Token": CRYPTO_PAY_API, "Content-Type": "application/json"})
        data = r.json()
        if "result" in data:
            invoice_id = data["result"]["invoice_id"]
            pay_url = data["result"]["pay_url"]
            with open("invoices.txt", "a", encoding="utf-8") as f:
                f.write(f"{m.from_user.id}:{invoice_id}\n")
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=pay_url))
            bot.send_message(m.chat.id, f"üí≥ –°—É–º–º–∞: {CRYPTO_AMOUNT} {CRYPTO_CURRENCY}\nüíé –ü—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è.", reply_markup=kb)
        else:
            bot.send_message(m.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: {e}")

@bot.message_handler(func=lambda m: m.text == "üì± –ü—Ä–æ–±–∏—Ç—å –Ω–æ–º–µ—Ä")
def ask_number(m):
    bot.send_message(m.chat.id, "üì≤ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380...")

@bot.message_handler(content_types=["text"])
def check_number(m):
    if not m.text.startswith("+") or len(m.text) < 10:
        return
    if not check_limit(m.from_user.id):
        return bot.send_message(m.chat.id, "‚ùå –õ–∏–º–∏—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Å. –ö—É–ø–∏ üíé –ø—Ä–µ–º–∏—É–º –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞.")
    try:
        num = phonenumbers.parse(m.text, None)
        if not phonenumbers.is_possible_number(num):
            return bot.send_message(m.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        valid = phonenumbers.is_valid_number(num)
        national = format_number(num, PhoneNumberFormat.NATIONAL)
        region = geocoder.description_for_number(num, "ru")
        zone = ", ".join(timezone.time_zones_for_number(num))
        carrier_name = carrier.name_for_number(num, "ru")
        ccode = num.country_code
        ntype = {
            PhoneNumberType.MOBILE: "üì± –ú–æ–±–∏–ª—å–Ω—ã–π",
            PhoneNumberType.FIXED_LINE: "‚òéÔ∏è –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π",
            PhoneNumberType.VOIP: "üåê IP",
        }.get(number_type(num), "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        leaks = check_leaks(m.text)
        msg = (
            f"üìû <b>–ù–æ–º–µ—Ä:</b> {m.text}\n"
            f"‚úÖ <b>–í–∞–ª–∏–¥–Ω—ã–π:</b> {'–î–∞' if valid else '–ù–µ—Ç'}\n"
            f"üìú <b>–§–æ—Ä–º–∞—Ç:</b> {national}\n"
            f"üìü <b>–¢–∏–ø:</b> {ntype}\n"
            f"üè¢ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {carrier_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {region}\n"
            f"üïí <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {zone}\n"
            f"üá∫üá≥ <b>–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã:</b> +{ccode}\n"
            f"üïµÔ∏è <b>–£—Ç–µ—á–∫–∞:</b> {'üî¥ –ù–∞–π–¥–µ–Ω!' if leaks else 'üü¢ –ù–µ—Ç'}"
        )
        bot.send_message(m.chat.id, msg)
        log(m.from_user.id, m.text)
        log_request(m.from_user.id)

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        for admin in ADMIN_IDS:
            try:
                bot.send_message(admin, f"üëÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{m.from_user.username or m.from_user.first_name} –ø—Ä–æ–±–∏–ª –Ω–æ–º–µ—Ä {m.text}")
            except: pass
    except:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")

# === –§–û–ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ===
def check_payments():
    while True:
        try:
            lines = open("invoices.txt", encoding="utf-8").readlines()
            new = []
            for line in lines:
                uid, invoice = line.strip().split(":")
                r = requests.get(f"https://pay.crypt.bot/getInvoices?invoice_ids={invoice}", headers={"Crypto-Pay-API-Token": CRYPTO_PAY_API})
                data = r.json()
                if "result" in data and data["result"] and data["result"][0]["status"] == "paid":
                    add_premium(uid)
                    bot.send_message(uid, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞. –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                else:
                    new.append(line)
            with open("invoices.txt", "w", encoding="utf-8") as f:
                f.writelines(new)
        except Exception as e:
            print("Pay check error:", e)
        time.sleep(10)

threading.Thread(target=check_payments, daemon=True).start()

# === –ó–ê–ü–£–°–ö ===
bot.infinity_polling()
